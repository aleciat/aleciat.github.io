Total State:

App.js :
  this.state = {
		categories: [],	
		posts: [],
		filteredPosts: [],
	}
	}
	
	
PostDisplay :
state = {
	postID: "",
	showPost: false,
}


Create :
  this.state = {
	title: "",
	post: "",
	name: "",
	category: "react",
	fireRedirect: false,
	};
	
	

    case RECEIVE_POSTS:
      const postsArray = action.posts.data;
      // Turn it into hashobjects for increased performance and easier handling
	  
      const posts = postsArray.reduce(
          (accumulator, obj) => {
            accumulator[obj.id] = obj;
            return accumulator;
          },
          {}
        );
        return {
          ...state,
          ...posts
        };
		
		
{
type: EDIT_USER
id: 847
}

Action Creator: Function that returns a created action.
const submitUser = user => ({
  type: SUBMIT_USER,
  user
});

----

As a preview, MyComponent is the component you want to receive store state, 
dispatch, or both. mapStateToProps() is a function that receives the current 
store, current props, and what it returns will be available to MyComponent as 
props. mapDispatchToProps() allows you wrap action creators inside of dispatch. 
Let's take a closer look at each of them!




doThing = () => {
this.props.dispatch(addPost({}))}

INSTEAD: 
function mapDispatchToProps (dispatch) {
  return {
	selectRecipe: (data) => dispatch(addRecipe(data)),
	remove: (data) => dispatch(removeFromCalendar(data)),
	}}
	
	AND pass mapDispatchToProps as second argument to first connect parenthesis
	
	
	
	
	function todoApp(state = initialState, action) {
  switch (action.type) {
    case SET_VISIBILITY_FILTER:
      return Object.assign({}, state, {
        visibilityFilter: action.filter
      })
    default:
      return state
  }
}



posts: Object.keys(posts).map(key => posts[key])